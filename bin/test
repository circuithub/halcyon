#!/usr/bin/env bash

set -eu

export HALCYON_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd -P )

source "${HALCYON_DIR}/src.sh"


test_cabal () {
	local -a cabal_versions_a
	cabal_versions_a=()
	cabal_versions_a+=( '1.20.0.0' )
	cabal_versions_a+=( '1.20.0.1' )
	cabal_versions_a+=( '1.20.0.3' )
	cabal_versions_a+=( '1.20.0.5' )
	cabal_versions_a+=( '1.20.0.6' )
	cabal_versions_a+=( '1.20.1.0' )
	cabal_versions_a+=( '1.22.0.0' )
	cabal_versions_a+=( '1.22.0.1' )
	cabal_versions_a+=( '1.22.2.0' )
	cabal_versions_a+=( '1.22.3.0' )
	cabal_versions_a+=( '1.22.4.0' )
	cabal_versions_a+=( '1.22.5.0' )
	cabal_versions_a+=( '1.22.6.0' )
	cabal_versions_a+=( '1.22.7.0' )
	cabal_versions_a+=( '1.22.8.0' )
	cabal_versions_a+=( '1.22.9.0' )

	log 'Testing Cabal'

	for cabal_version in "${cabal_versions_a[@]}"; do
		local -a opts_a
		opts_a=()
		opts_a+=( --cabal-version="${cabal_version}" )
		case "${cabal_version}" in
		'1.20.0.3'|'1.22.9.0')
			true
			;;
		*)
			opts_a+=( --cabal-no-update )
		esac

		log
		halcyon install "${opts_a[@]}" "$@" || return 1
	done
}


test_ghc () {
	expect_vars HALCYON_INTERNAL_PLATFORM
	local -a ghc_versions_a
	ghc_versions_a=()
	ghc_versions_a+=( '7.0.4' )
	ghc_versions_a+=( '7.2.2' )
	ghc_versions_a+=( '7.4.2' )
	ghc_versions_a+=( '7.6.1' )
	ghc_versions_a+=( '7.6.3' )
	ghc_versions_a+=( '7.8.2' )
	ghc_versions_a+=( '7.8.3' )
	ghc_versions_a+=( '7.8.4' )
	case "${HALCYON_INTERNAL_PLATFORM}" in
	'linux-centos-6'*'-i386'|'linux-debian-6'*|'linux-ubuntu-10'*)
		true
		;;
	*)
		ghc_versions_a+=( '7.10.1' )
		ghc_versions_a+=( '7.10.2-rc1' )
	esac

	log 'Testing GHC'

	for ghc_version in "${ghc_versions_a[@]}"; do
		local ghc_major ghc_minor
		ghc_major="${ghc_version%%.*}"
		ghc_minor="${ghc_version#*.}"
		ghc_minor="${ghc_minor%%.*}"

		local -a opts_a
		opts_a=()
		opts_a+=( --ghc-version="${ghc_version}" )
		if (( ghc_major == 7 && ghc_minor >= 10 )); then
			opts_a+=( --cabal-version='1.22.9.0' )
		fi

		log
		halcyon install "${opts_a[@]}" "$@" || return 1
	done
}


test_tutorial () {
	local -a urls_a
	urls_a=()
	urls_a+=( "https://github.com/mietek/halcyon-tutorial" )
	urls_a+=( "https://github.com/mietek/haskell-on-heroku-tutorial" )

	log 'Testing tutorial'

	for url in "${urls_a[@]}"; do
		log
		halcyon install "${url}" "$@" || return 1
	done
}


test_sandbox_apps () {
	expect_vars HALCYON_BASE

	local -a names_a
	names_a=()
	names_a+=( 'alex' )
	names_a+=( 'happy' )
	names_a+=( 'c2hs' )
	names_a+=( 'cpphs' )
	names_a+=( 'hscolour' )
	names_a+=( 'haddock' )
	names_a+=( 'greencard' )

	local constraints_dir
	constraints_dir=$( get_tmp_dir 'halcyon-constraints' ) || return 1

	log 'Testing sandbox apps'

	mkdir -p "${constraints_dir}" || return 1

	local -A labels_A
	labels_A=()
	for name in "${names_a[@]}"; do
		local label
		label=$( halcyon label "${name}" 2>'/dev/null' ) || return 1
		labels_A[${name}]="${label}"
		halcyon constraints "${label}" >"${constraints_dir}/${label}.constraints" 2>'/dev/null' || return 1

		local -a opts_a
		opts_a=()
		opts_a+=( --constraints="${constraints_dir}" )
		opts_a+=( --prefix="${HALCYON_BASE}/sandbox" )
		if [[ "${name}" == 'c2hs' ]]; then
			opts_a+=( --sandbox-extra-apps="${labels_A[alex]} ${labels_A[happy]}" )
			opts_a+=( --sandbox-extra-apps-constraints="${constraints_dir}" )
		fi

		log
		halcyon install "${opts_a[@]}" "${label}" "$@" || return 1
	done
}


test_apps () {
	local -a names_a
	names_a=()
	names_a+=( 'keter' )
	names_a+=( 'pandoc' )

	local constraints_dir
	constraints_dir=$( get_tmp_dir 'halcyon-constraints' ) || return 1

	log 'Testing apps'

	mkdir -p "${constraints_dir}" || return 1

	local -A labels_A
	labels_A=()
	for name in "${names_a[@]}"; do
		local label
		label=$( halcyon label "${name}" 2>'/dev/null' ) || return 1
		labels_A[${name}]="${label}"
		halcyon constraints "${label}" >"${constraints_dir}/${label}.constraints" 2>'/dev/null' || return 1

		local -a opts_a
		opts_a=()
		opts_a+=( --constraints="${constraints_dir}" )

		log
		halcyon install "${opts_a[@]}" "${label}" "$@" || return 1
	done
}


bench_first_build () {
	expect_vars HALCYON_BASE

	local url csv_file
	expect_args url csv_file -- "$@"
	shift 2

	local name log_file
	name=$( basename "${url}" ) || return 1
	log_file=$( get_tmp_file 'halcyon-shootout' )'.log' || return 1

	rm -rf "${HALCYON_BASE}/ghc" "${HALCYON_BASE}/cabal" || return 1

	HALCYON_SANDBOX_REBUILD=1 \
	HALCYON_NO_UPLOAD=1 \
		halcyon install "${url}" "$@" 2>&1 | tee "${log_file}" || return 1

	local restore_time sandbox_time build_time install_time
	restore_time=$( filter_matching 'Building sandbox directory$' <"${log_file}" | awk '{ print $2 }' )
	sandbox_time=$( filter_matching 'Configuring app$' <"${log_file}" | awk '{ print $2 }' )
	build_time=$( filter_matching 'Preparing install directory$' <"${log_file}" | awk '{ print $2 }' )
	install_time=$( filter_matching 'App installed:' <"${log_file}" | awk '{ print $2 }' )

	local sandbox_size app_size
	sandbox_size=$( filter_matching 'Sandbox built,' <"${log_file}" | awk '{ print $6 }' )
	app_size=$( filter_matching 'App built,' <"${log_file}" | awk '{ print $6 }' )

	echo "${name},${restore_time},${sandbox_time},${build_time},${install_time},${sandbox_size},${app_size}" >>"${csv_file}"
}


test_shootout () {
	local bench branch
	expect_args bench branch -- "$@"
	shift 2

	local -a urls_a
	urls_a=()
	if ! (( bench )); then
		# NOTE: When not benchmarking, hello-wai goes first, so that
		# the sandbox can be reused to speed up the other builds.
		urls_a+=( "https://github.com/mietek/hello-wai${branch}" )
	fi
	urls_a+=( "https://github.com/mietek/hello-apiary${branch}" )
	urls_a+=( "https://github.com/mietek/hello-happstack${branch}" )
	urls_a+=( "https://github.com/mietek/hello-mflow${branch}" )
	urls_a+=( "https://github.com/mietek/hello-miku${branch}" )
	urls_a+=( "https://github.com/mietek/hello-scotty${branch}" )
	urls_a+=( "https://github.com/mietek/hello-servant${branch}" )
	urls_a+=( "https://github.com/mietek/hello-simple${branch}" )
	urls_a+=( "https://github.com/mietek/hello-snap${branch}" )
	urls_a+=( "https://github.com/mietek/hello-spock${branch}" )
	if (( bench )); then
		urls_a+=( "https://github.com/mietek/hello-wai${branch}" )
	fi
	urls_a+=( "https://github.com/mietek/hello-wheb${branch}" )
	urls_a+=( "https://github.com/mietek/hello-yesod${branch}" )

	local csv_file
	csv_file=''
	if (( bench )); then
		csv_file=$( get_tmp_file 'halcyon-shootout' )'.csv' || return 1
	fi

	log 'Testing shootout'

	for url in "${urls_a[@]}"; do
		log
		if (( bench )); then
			bench_first_build "${url}" "${csv_file}" "$@" || return 1
		else
			halcyon install "${url}" "$@" || return 1
		fi
	done

	if (( bench )); then
		cat "${csv_file}"
	fi
}


test_examples () {
	local branch
	expect_args branch -- "$@"
	shift

	local -a urls_a
	urls_a=()
	urls_a+=( "https://github.com/mietek/howistart${branch}" )
	urls_a+=( "https://github.com/mietek/hl${branch}" )
	urls_a+=( "https://github.com/mietek/tryhaskell${branch}" )
	urls_a+=( "https://github.com/mietek/tryidris${branch}" )
	urls_a+=( "https://github.com/mietek/trypurescript${branch}" )
	urls_a+=( "https://github.com/mietek/tryhaste${branch}" )
	urls_a+=( "https://github.com/mietek/gitit${branch}" )

	log 'Testing examples'

	for url in "${urls_a[@]}"; do
		log
		halcyon install "${url}" "$@" || return 1
	done
}


help_test_usage () {
	cat >&2 <<-EOF
		Usage:
		  test                                    COMMAND

		Commands:
		  cabal
		  ghc
		  tutorial
		  sandbox-apps
		  apps
		  shootout                                --bench? --branch?
		  examples                                --branch?
		  all
	EOF
}


test_main () {
	local cmd bench branch
	local -a args_a
	cmd=''
	bench=0
	branch=''
	args_a=()

	while (( $# )); do
		case "$1" in

		'--bench')
			bench=1;;
		'--branch')
			shift
			expect_args branch -- "$@";;
		'--branch='*)
			branch="${1#*=}";;

		'-h'|'--help')
			help_usage
			return 0
			;;
		'--')
			shift
			while (( $# )); do
				if [[ -z "${cmd}" ]]; then
					cmd="$1"
				else
					args_a+=( "$1" )
				fi
				shift
			done
			break
			;;
		'-'*)
			log_error "Unexpected option: $1"
			log
			help_test_usage
			return 1
			;;
		*)
			if [[ -z "${cmd}" ]]; then
				cmd="$1"
			else
				args_a+=( "$1" )
			fi
		esac
		shift
	done

	if [[ -n "${branch}" && ! "${branch}" =~ ^# ]]; then
		branch="#${branch}"
	fi

	case "${cmd}" in
	'cabal')
		test_cabal ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'ghc')
		test_ghc ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'tutorial')
		test_tutorial ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'sandbox-apps')
		test_sandbox_apps ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'apps')
		test_apps ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'shootout')
		test_shootout "${bench}" "${branch}" ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'examples')
		test_examples "${branch}" ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'all')
		test_cabal ${args_a[@]:+"${args_a[@]}"} || return 1
		test_ghc ${args_a[@]:+"${args_a[@]}"} || return 1
		test_tutorial ${args_a[@]:+"${args_a[@]}"} || return 1
		test_sandbox_apps ${args_a[@]:+"${args_a[@]}"} || return 1
		test_apps ${args_a[@]:+"${args_a[@]}"} || return 1
		test_shootout "${bench}" "${branch}" ${args_a[@]:+"${args_a[@]}"} || return 1
		test_examples "${branch}" ${args_a[@]:+"${args_a[@]}"} || return 1
		;;
	'help')
		help_test_usage
		return 0
		;;
	'')
		log_error 'Expected command'
		log
		help_test_usage
		return 1
		;;
	*)
		log_error "Unexpected command: ${cmd} ${args_a[*]:-}"
		log
		help_test_usage
		return 1
	esac
}


HALCYON_LOG_TIMESTAMP=1 \
HALCYON_NO_SELF_UPDATE=1 \
HALCYON_NO_CLEAN_CACHE=1 \
	test_main "$@"
